{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"C:/Users/domen/wa/SafeArt_Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/domen/wa/SafeArt_Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/domen/wa/SafeArt_Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"C:/Users/domen/wa/SafeArt_Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"C:/Users/domen/wa/SafeArt_Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/domen/wa/SafeArt_Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar allowedTransactionKeys = [\"accessList\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"];\nvar forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];\n;\n;\nexport var Signer = /*#__PURE__*/function () {\n  ///////////////////\n  // Sub-classes MUST call super\n  function Signer() {\n    _classCallCheck(this, Signer);\n\n    logger.checkAbstract(this instanceof Signer ? this.constructor : void 0, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  } ///////////////////\n  // Sub-classes MAY override these\n\n\n  _createClass(Signer, [{\n    key: \"getBalance\",\n    value: function getBalance(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._checkProvider(\"getBalance\");\n\n                _context.next = 3;\n                return this.provider.getBalance(this.getAddress(), blockTag);\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._checkProvider(\"getTransactionCount\");\n\n                _context2.next = 3;\n                return this.provider.getTransactionCount(this.getAddress(), blockTag);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    } // Populates \"from\" if unspecified, and estimates the gas for the transaction\n\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var tx;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._checkProvider(\"estimateGas\");\n\n                _context3.next = 3;\n                return resolveProperties(this.checkTransaction(transaction));\n\n              case 3:\n                tx = _context3.sent;\n                _context3.next = 6;\n                return this.provider.estimateGas(tx);\n\n              case 6:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    } // Populates \"from\" if unspecified, and calls with the transaction\n\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var tx;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this._checkProvider(\"call\");\n\n                _context4.next = 3;\n                return resolveProperties(this.checkTransaction(transaction));\n\n              case 3:\n                tx = _context4.sent;\n                _context4.next = 6;\n                return this.provider.call(tx, blockTag);\n\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    } // Populates all fields in a transaction, signs it and sends it to the network\n\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var tx, signedTx;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this._checkProvider(\"sendTransaction\");\n\n                _context5.next = 3;\n                return this.populateTransaction(transaction);\n\n              case 3:\n                tx = _context5.sent;\n                _context5.next = 6;\n                return this.signTransaction(tx);\n\n              case 6:\n                signedTx = _context5.sent;\n                _context5.next = 9;\n                return this.provider.sendTransaction(signedTx);\n\n              case 9:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getChainId\",\n    value: function getChainId() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var network;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this._checkProvider(\"getChainId\");\n\n                _context6.next = 3;\n                return this.provider.getNetwork();\n\n              case 3:\n                network = _context6.sent;\n                return _context6.abrupt(\"return\", network.chainId);\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this._checkProvider(\"getGasPrice\");\n\n                _context7.next = 3;\n                return this.provider.getGasPrice();\n\n              case 3:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"getFeeData\",\n    value: function getFeeData() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this._checkProvider(\"getFeeData\");\n\n                _context8.next = 3;\n                return this.provider.getFeeData();\n\n              case 3:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                this._checkProvider(\"resolveName\");\n\n                _context9.next = 3;\n                return this.provider.resolveName(name);\n\n              case 3:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    } // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n\n  }, {\n    key: \"checkTransaction\",\n    value: function checkTransaction(transaction) {\n      for (var key in transaction) {\n        if (allowedTransactionKeys.indexOf(key) === -1) {\n          logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n        }\n      }\n\n      var tx = shallowCopy(transaction);\n\n      if (tx.from == null) {\n        tx.from = this.getAddress();\n      } else {\n        // Make sure any provided address matches this signer\n        tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(function (result) {\n          if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n            logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n          }\n\n          return result[0];\n        });\n      }\n\n      return tx;\n    } // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n\n  }, {\n    key: \"populateTransaction\",\n    value: function populateTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var _this = this;\n\n        var tx, hasEip1559, feeData, gasPrice;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return resolveProperties(this.checkTransaction(transaction));\n\n              case 2:\n                tx = _context11.sent;\n\n                if (tx.to != null) {\n                  tx.to = Promise.resolve(tx.to).then(function (to) {\n                    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n                      var address;\n                      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                        while (1) {\n                          switch (_context10.prev = _context10.next) {\n                            case 0:\n                              if (!(to == null)) {\n                                _context10.next = 2;\n                                break;\n                              }\n\n                              return _context10.abrupt(\"return\", null);\n\n                            case 2:\n                              _context10.next = 4;\n                              return this.resolveName(to);\n\n                            case 4:\n                              address = _context10.sent;\n\n                              if (address == null) {\n                                logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                              }\n\n                              return _context10.abrupt(\"return\", address);\n\n                            case 7:\n                            case \"end\":\n                              return _context10.stop();\n                          }\n                        }\n                      }, _callee10, this);\n                    }));\n                  }); // Prevent this error from causing an UnhandledPromiseException\n\n                  tx.to.catch(function (error) {});\n                } // Do not allow mixing pre-eip-1559 and eip-1559 properties\n\n\n                hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n\n                if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                  logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n                } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                  logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n                }\n\n                if (!((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n                  _context11.next = 10;\n                  break;\n                }\n\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\n                tx.type = 2;\n                _context11.next = 18;\n                break;\n\n              case 10:\n                if (!(tx.type === 0 || tx.type === 1)) {\n                  _context11.next = 14;\n                  break;\n                }\n\n                // Explicit Legacy or EIP-2930 transaction\n                // Populate missing gasPrice\n                if (tx.gasPrice == null) {\n                  tx.gasPrice = this.getGasPrice();\n                }\n\n                _context11.next = 18;\n                break;\n\n              case 14:\n                _context11.next = 16;\n                return this.getFeeData();\n\n              case 16:\n                feeData = _context11.sent;\n\n                if (tx.type == null) {\n                  // We need to auto-detect the intended type of this transaction...\n                  if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n                    // Upgrade transaction from null to eip-1559\n                    tx.type = 2;\n\n                    if (tx.gasPrice != null) {\n                      // Using legacy gasPrice property on an eip-1559 network,\n                      // so use gasPrice as both fee properties\n                      gasPrice = tx.gasPrice;\n                      delete tx.gasPrice;\n                      tx.maxFeePerGas = gasPrice;\n                      tx.maxPriorityFeePerGas = gasPrice;\n                    } else {\n                      // Populate missing fee data\n                      if (tx.maxFeePerGas == null) {\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\n                      }\n\n                      if (tx.maxPriorityFeePerGas == null) {\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                      }\n                    }\n                  } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n                    // ...but they are trying to use EIP-1559 properties\n                    if (hasEip1559) {\n                      logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"populateTransaction\"\n                      });\n                    } // Populate missing fee data\n\n\n                    if (tx.gasPrice == null) {\n                      tx.gasPrice = feeData.gasPrice;\n                    } // Explicitly set untyped transaction to legacy\n\n\n                    tx.type = 0;\n                  } else {\n                    // getFeeData has failed us.\n                    logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      operation: \"signer.getFeeData\"\n                    });\n                  }\n                } else if (tx.type === 2) {\n                  // Explicitly using EIP-1559\n                  // Populate missing fee data\n                  if (tx.maxFeePerGas == null) {\n                    tx.maxFeePerGas = feeData.maxFeePerGas;\n                  }\n\n                  if (tx.maxPriorityFeePerGas == null) {\n                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                  }\n                }\n\n              case 18:\n                if (tx.nonce == null) {\n                  tx.nonce = this.getTransactionCount(\"pending\");\n                }\n\n                if (tx.gasLimit == null) {\n                  tx.gasLimit = this.estimateGas(tx).catch(function (error) {\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                      throw error;\n                    }\n\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                      error: error,\n                      tx: tx\n                    });\n                  });\n                }\n\n                if (tx.chainId == null) {\n                  tx.chainId = this.getChainId();\n                } else {\n                  tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(function (results) {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                      logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n\n                    return results[0];\n                  });\n                }\n\n                _context11.next = 23;\n                return resolveProperties(tx);\n\n              case 23:\n                return _context11.abrupt(\"return\", _context11.sent);\n\n              case 24:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    } ///////////////////\n    // Sub-classes SHOULD leave these alone\n\n  }, {\n    key: \"_checkProvider\",\n    value: function _checkProvider(operation) {\n      if (!this.provider) {\n        logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: operation || \"_checkProvider\"\n        });\n      }\n    }\n  }], [{\n    key: \"isSigner\",\n    value: function isSigner(value) {\n      return !!(value && value._isSigner);\n    }\n  }]);\n\n  return Signer;\n}();\nexport var VoidSigner = /*#__PURE__*/function (_Signer) {\n  _inherits(VoidSigner, _Signer);\n\n  var _super = _createSuper(VoidSigner);\n\n  function VoidSigner(address, provider) {\n    var _this2;\n\n    _classCallCheck(this, VoidSigner);\n\n    logger.checkNew(this instanceof VoidSigner ? this.constructor : void 0, VoidSigner);\n    _this2 = _super.call(this);\n    defineReadOnly(_assertThisInitialized(_this2), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this2), \"provider\", provider || null);\n    return _this2;\n  }\n\n  _createClass(VoidSigner, [{\n    key: \"getAddress\",\n    value: function getAddress() {\n      return Promise.resolve(this.address);\n    }\n  }, {\n    key: \"_fail\",\n    value: function _fail(message, operation) {\n      return Promise.resolve().then(function () {\n        logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: operation\n        });\n      });\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new VoidSigner(this.address, provider);\n    }\n  }]);\n\n  return VoidSigner;\n}(Signer);","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\nconst allowedTransactionKeys = [\r\n    \"accessList\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\r\n];\r\nconst forwardErrors = [\r\n    Logger.errors.INSUFFICIENT_FUNDS,\r\n    Logger.errors.NONCE_EXPIRED,\r\n    Logger.errors.REPLACEMENT_UNDERPRICED,\r\n];\r\n;\r\n;\r\nexport class Signer {\r\n    ///////////////////\r\n    // Sub-classes MUST call super\r\n    constructor() {\r\n        logger.checkAbstract(new.target, Signer);\r\n        defineReadOnly(this, \"_isSigner\", true);\r\n    }\r\n    ///////////////////\r\n    // Sub-classes MAY override these\r\n    getBalance(blockTag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._checkProvider(\"getBalance\");\r\n            return yield this.provider.getBalance(this.getAddress(), blockTag);\r\n        });\r\n    }\r\n    getTransactionCount(blockTag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._checkProvider(\"getTransactionCount\");\r\n            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\r\n        });\r\n    }\r\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\r\n    estimateGas(transaction) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._checkProvider(\"estimateGas\");\r\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\r\n            return yield this.provider.estimateGas(tx);\r\n        });\r\n    }\r\n    // Populates \"from\" if unspecified, and calls with the transaction\r\n    call(transaction, blockTag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._checkProvider(\"call\");\r\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\r\n            return yield this.provider.call(tx, blockTag);\r\n        });\r\n    }\r\n    // Populates all fields in a transaction, signs it and sends it to the network\r\n    sendTransaction(transaction) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._checkProvider(\"sendTransaction\");\r\n            const tx = yield this.populateTransaction(transaction);\r\n            const signedTx = yield this.signTransaction(tx);\r\n            return yield this.provider.sendTransaction(signedTx);\r\n        });\r\n    }\r\n    getChainId() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._checkProvider(\"getChainId\");\r\n            const network = yield this.provider.getNetwork();\r\n            return network.chainId;\r\n        });\r\n    }\r\n    getGasPrice() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._checkProvider(\"getGasPrice\");\r\n            return yield this.provider.getGasPrice();\r\n        });\r\n    }\r\n    getFeeData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._checkProvider(\"getFeeData\");\r\n            return yield this.provider.getFeeData();\r\n        });\r\n    }\r\n    resolveName(name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._checkProvider(\"resolveName\");\r\n            return yield this.provider.resolveName(name);\r\n        });\r\n    }\r\n    // Checks a transaction does not contain invalid keys and if\r\n    // no \"from\" is provided, populates it.\r\n    // - does NOT require a provider\r\n    // - adds \"from\" is not present\r\n    // - returns a COPY (safe to mutate the result)\r\n    // By default called from: (overriding these prevents it)\r\n    //   - call\r\n    //   - estimateGas\r\n    //   - populateTransaction (and therefor sendTransaction)\r\n    checkTransaction(transaction) {\r\n        for (const key in transaction) {\r\n            if (allowedTransactionKeys.indexOf(key) === -1) {\r\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\r\n            }\r\n        }\r\n        const tx = shallowCopy(transaction);\r\n        if (tx.from == null) {\r\n            tx.from = this.getAddress();\r\n        }\r\n        else {\r\n            // Make sure any provided address matches this signer\r\n            tx.from = Promise.all([\r\n                Promise.resolve(tx.from),\r\n                this.getAddress()\r\n            ]).then((result) => {\r\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\r\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\r\n                }\r\n                return result[0];\r\n            });\r\n        }\r\n        return tx;\r\n    }\r\n    // Populates ALL keys for a transaction and checks that \"from\" matches\r\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\r\n    // By default called from: (overriding these prevents it)\r\n    //   - sendTransaction\r\n    //\r\n    // Notes:\r\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\r\n    populateTransaction(transaction) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\r\n            if (tx.to != null) {\r\n                tx.to = Promise.resolve(tx.to).then((to) => __awaiter(this, void 0, void 0, function* () {\r\n                    if (to == null) {\r\n                        return null;\r\n                    }\r\n                    const address = yield this.resolveName(to);\r\n                    if (address == null) {\r\n                        logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\r\n                    }\r\n                    return address;\r\n                }));\r\n                // Prevent this error from causing an UnhandledPromiseException\r\n                tx.to.catch((error) => { });\r\n            }\r\n            // Do not allow mixing pre-eip-1559 and eip-1559 properties\r\n            const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\r\n            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\r\n                logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\r\n            }\r\n            else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\r\n                logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\r\n            }\r\n            if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\r\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\r\n                tx.type = 2;\r\n            }\r\n            else if (tx.type === 0 || tx.type === 1) {\r\n                // Explicit Legacy or EIP-2930 transaction\r\n                // Populate missing gasPrice\r\n                if (tx.gasPrice == null) {\r\n                    tx.gasPrice = this.getGasPrice();\r\n                }\r\n            }\r\n            else {\r\n                // We need to get fee data to determine things\r\n                const feeData = yield this.getFeeData();\r\n                if (tx.type == null) {\r\n                    // We need to auto-detect the intended type of this transaction...\r\n                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\r\n                        // The network supports EIP-1559!\r\n                        // Upgrade transaction from null to eip-1559\r\n                        tx.type = 2;\r\n                        if (tx.gasPrice != null) {\r\n                            // Using legacy gasPrice property on an eip-1559 network,\r\n                            // so use gasPrice as both fee properties\r\n                            const gasPrice = tx.gasPrice;\r\n                            delete tx.gasPrice;\r\n                            tx.maxFeePerGas = gasPrice;\r\n                            tx.maxPriorityFeePerGas = gasPrice;\r\n                        }\r\n                        else {\r\n                            // Populate missing fee data\r\n                            if (tx.maxFeePerGas == null) {\r\n                                tx.maxFeePerGas = feeData.maxFeePerGas;\r\n                            }\r\n                            if (tx.maxPriorityFeePerGas == null) {\r\n                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (feeData.gasPrice != null) {\r\n                        // Network doesn't support EIP-1559...\r\n                        // ...but they are trying to use EIP-1559 properties\r\n                        if (hasEip1559) {\r\n                            logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                                operation: \"populateTransaction\"\r\n                            });\r\n                        }\r\n                        // Populate missing fee data\r\n                        if (tx.gasPrice == null) {\r\n                            tx.gasPrice = feeData.gasPrice;\r\n                        }\r\n                        // Explicitly set untyped transaction to legacy\r\n                        tx.type = 0;\r\n                    }\r\n                    else {\r\n                        // getFeeData has failed us.\r\n                        logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                            operation: \"signer.getFeeData\"\r\n                        });\r\n                    }\r\n                }\r\n                else if (tx.type === 2) {\r\n                    // Explicitly using EIP-1559\r\n                    // Populate missing fee data\r\n                    if (tx.maxFeePerGas == null) {\r\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\r\n                    }\r\n                    if (tx.maxPriorityFeePerGas == null) {\r\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\r\n                    }\r\n                }\r\n            }\r\n            if (tx.nonce == null) {\r\n                tx.nonce = this.getTransactionCount(\"pending\");\r\n            }\r\n            if (tx.gasLimit == null) {\r\n                tx.gasLimit = this.estimateGas(tx).catch((error) => {\r\n                    if (forwardErrors.indexOf(error.code) >= 0) {\r\n                        throw error;\r\n                    }\r\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\r\n                        error: error,\r\n                        tx: tx\r\n                    });\r\n                });\r\n            }\r\n            if (tx.chainId == null) {\r\n                tx.chainId = this.getChainId();\r\n            }\r\n            else {\r\n                tx.chainId = Promise.all([\r\n                    Promise.resolve(tx.chainId),\r\n                    this.getChainId()\r\n                ]).then((results) => {\r\n                    if (results[1] !== 0 && results[0] !== results[1]) {\r\n                        logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\r\n                    }\r\n                    return results[0];\r\n                });\r\n            }\r\n            return yield resolveProperties(tx);\r\n        });\r\n    }\r\n    ///////////////////\r\n    // Sub-classes SHOULD leave these alone\r\n    _checkProvider(operation) {\r\n        if (!this.provider) {\r\n            logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: (operation || \"_checkProvider\")\r\n            });\r\n        }\r\n    }\r\n    static isSigner(value) {\r\n        return !!(value && value._isSigner);\r\n    }\r\n}\r\nexport class VoidSigner extends Signer {\r\n    constructor(address, provider) {\r\n        logger.checkNew(new.target, VoidSigner);\r\n        super();\r\n        defineReadOnly(this, \"address\", address);\r\n        defineReadOnly(this, \"provider\", provider || null);\r\n    }\r\n    getAddress() {\r\n        return Promise.resolve(this.address);\r\n    }\r\n    _fail(message, operation) {\r\n        return Promise.resolve().then(() => {\r\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\r\n        });\r\n    }\r\n    signMessage(message) {\r\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\r\n    }\r\n    signTransaction(transaction) {\r\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\r\n    }\r\n    _signTypedData(domain, types, value) {\r\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\r\n    }\r\n    connect(provider) {\r\n        return new VoidSigner(this.address, provider);\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}